#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

if [ "$STACK" != "heroku-16" ] && [ "$STACK" != "heroku-18" ]; then
	echo "Need heroku-16 or heroku-18 stack"
	exit 1
fi

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

### Load dependencies
source $BP_DIR/lib/utils

export_env_dir ${ENV_DIR}
export NUGET_XMLDOC_MODE=${NUGET_XMLDOC_MODE:-skip}
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

DOTNET_SDK_VERSION=${DOTNET_SDK_VERSION:-3.1.410}
DOTNET_RUNTIME_VERSION=${DOTNET_RUNTIME_VERSION:-3.1.16}
BUILD_CONFIGURATION=${BUILD_CONFIGURATION:-Release}
PROCFILE_PATH=${PROCFILE_PATH:-${BUILD_DIR}/Procfile}

if [ -z "${PROCFILE_PATH}" ]; then
	echo "PROCFILE_PATH is required. Set environment variable in the heroku app."
	exit 1
else
	PROCFILE_PATH=${BUILD_DIR}/${PROCFILE_PATH}
	echo ${PROCFILE_PATH}
fi

if ! [ -f ${PROCFILE_PATH} ]; then
	echo "${PROCFILE_PATH} file does not exist. Please add it to repo."
	exit 1
fi

echo "Installing dotnet"
install_dotnet $BUILD_DIR $CACHE_DIR $DOTNET_SDK_VERSION $DOTNET_RUNTIME_VERSION
DOTNET_CACHE_LOCATION=${CACHE_DIR}/dotnet/${DOTNET_SDK_VERSION}
echo ${DOTNET_CACHE_LOCATION}/sdk > ${ENV_DIR}/DOTNET_SDK_LOCATION
echo "dotnet SDK installed at ${DOTNET_CACHE_LOCATION}/sdk"
echo "dotnet runtime installed at ${BUILD_DIR}/.heroku/dotnet"

export PATH="${BUILD_DIR}/.heroku/dotnet:${PATH}"
export NUGET_PACKAGES="${CACHE_DIR}/nuget/cache"

cd $BUILD_DIR

if [ -z ${PROJECT_FILE:-} ]; then
	echo "No PROJECT_FILE specified, looking for web projects..."
	PROJECT_FILE=$(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs -o -iname Program.cs | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name *.csproj; x=`dirname "$x"`; done)
fi

PROJECTS_TO_BUILD=$(echo $PROJECT_FILE | tr ";" "\n")

printf "%s\n"  "${PROJECTS_TO_BUILD[@]}"

for proj in $PROJECTS_TO_BUILD
do
	echo "dotnet build $proj --configuration ${BUILD_CONFIGURATION} --runtime linux-x64 -v ${BUILD_VERBOSITY:-q}"
	dotnet build $proj --configuration ${BUILD_CONFIGURATION} --runtime linux-x64 -v ${BUILD_VERBOSITY:-q}
done

if [ ${BUILD_PUBLISH:-true} = "true" ]; then
	for proj in $PROJECTS_TO_BUILD
	do
		PROJECT_NAME=$(basename ${proj%.*})

		echo "dotnet publish $proj --output ${BUILD_DIR}/heroku_output/${PROJECT_NAME} --configuration ${BUILD_CONFIGURATION} --runtime linux-x64"
		dotnet publish $proj --output ${BUILD_DIR}/heroku_output/${PROJECT_NAME} --configuration ${BUILD_CONFIGURATION} --runtime linux-x64
	done
fi

if [ ${CLEAN_AFTER_BUILD:-false} = "true" ]; then
	SLN=$(find "${BUILD_DIR}" -maxdepth 2 -name *.sln | head -1)
	if [ -z "${SLN}" ]; then
		echo "No solution found to clean"
	else
		echo "dotnet clean $SLN --configuration ${BUILD_CONFIGURATION} -v q"
		dotnet clean $SLN --configuration ${BUILD_CONFIGURATION} -v q

		echo "dotnet clean $SLN --configuration ${BUILD_CONFIGURATION} --runtime linux-x64 -v q"
		dotnet clean $SLN --configuration ${BUILD_CONFIGURATION} --runtime linux-x64 -v q
	fi
fi

echo "Cleanup dotnet SDK"
cleanup_dotnet $BUILD_DIR

cp ${PROCFILE_PATH} ${BUILD_DIR}/Procfile
echo "Using Procfile specified by PROCFILE_PATH: $PROCFILE_PATH" | indent
