#!/usr/bin/env bash
# bin/test <build-dir> <env-dir>


### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables

### Configure directories
BUILD_DIR=${1:-}
ENV_DIR=${2:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Load dependencies
source $BP_DIR/lib/utils

export_env_dir "$ENV_DIR"
export NUGET_XMLDOC_MODE=${NUGET_XMLDOC_MODE:-skip}
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

export PATH="${DOTNET_SDK_LOCATION}:${PATH}"

find_test_projects $BUILD_DIR

# keep track of error codes from all commands
# (this script must exit with a nonzero error code if ANY command exits with nonzero)
declare -i EXIT_CODE # == 0

# run each discovered test project
while IFS= read -r filename
  do
    echo "dotnet test -v ${BUILD_VERBOSITY:-q} --logger ${DOTNET_TEST_LOGGER:-console} --no-build --no-restore --configuration Debug $filename"
    dotnet test -v ${BUILD_VERBOSITY:-q} --logger:${DOTNET_TEST_LOGGER:-console} --no-build --no-restore --configuration Debug $filename
    EXIT_CODE+=$?
done <<< $TEST_PROJECTS

exit $EXIT_CODE
